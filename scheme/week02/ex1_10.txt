Exercise 1.10.  The following procedure computes a mathematical function called Ackermann's function.

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

What are the values of the following expressions?

(A 1 10)

1024 = 2 ** 10

(A 2 4)

65536 = 2 ** 16

(A 3 3)

65536 = 2 ** 16

Consider the following procedures, where A is the procedure defined above:

(define (f n) (A 0 n))

  substituting 0 for x and n for y in the Ackermann definition

  (define (f n)
    (cond ((= n 0) 0)
          ((= 0 0) (* 2 y))))
        
    returns 2 * n

(define (g n) (A 1 n))

  substituting 1 for x and n for y

  (define (g x y)
    (cond ((= n 0) 0)
          ((= n 1) 2)
          (else (A 0
                   (A 1 (- y 1))))))
                 
  substituting g(n) for (A 1 n))

  (define (g x y)
    (cond ((= n 0) 0)
          ((= n 1) 2)
          (else (A 0
                   (g (- y 1))))))
  note that (A 0 x) is the same as (f x)
  giving

  (define (g x y)
    (cond ((= n 0) 0)
          ((= n 1) 2)
          (else (f (g (- y 1))))))
        
  and since we have seen that (f x) is 2 * x

  (define (g n)
    (cond ((= n 0) 0)
          ((= n 1) 2)
          (else (* 2 (g (- y 1))))))
          
    So for 
    n = 0 => 0
    n = 1 => 2
    n > 1 2**n

   or just 2**n

(define (h n) (A 2 n))

  (define (h n)
    (cond ((= n 0) 0)
          ((= n 1) 2)
          (else (A (- 2 1)
                   (A 2 (- n 1))))))

 (define (h n)
   (cond ((= n 0) 0)
         ((= n 1) 2)
         (else (A 1
                  (A 2 (- n 1))))))
                  
 and (A 1 x) is (g x) so
 
 (define (h n)
   (cond ((= n 0) 0)
         ((= n 1) 2)
         (else (g (A 2 (- n 1))))))

 and (A 2 x) is (h x) so
 
 (define (h n)
   (cond ((= n 0) 0)
         ((= n 1) 2)
         (else (g (h (- n 1))))))
 
 
 (define (h n)
   (cond ((= n 0) 0)
         ((= n 1) 2)
         (else (2** (h (- n 1))))))
         
 So this appears to compute the tetration
 
     n
      2
      
   see: http://en.wikipedia.org/wiki/Tetration
 
(define (k n) (* 5 n n))

  This is just 5*n^2